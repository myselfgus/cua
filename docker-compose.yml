# Development Environment Setup

version: '3.8'

services:
  # Frontend Development
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: development
    ports:
      - "3000:3000"
      - "3001:3001"  # HMR port
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - FAST_REFRESH=true
      - APP_API_URL=http://localhost:8000
      - APP_AI_GATEWAY_URL=${APP_AI_GATEWAY_URL}
      - APP_MCP_GATEWAY_URL=http://localhost:8080
      - APP_QDRANT_URL=http://localhost:6333
      - APP_NEO4J_URL=http://localhost:7474
      - APP_REDIS_URL=redis://localhost:6379
    depends_on:
      - backend
      - redis
      - qdrant
      - neo4j
    command: npm run dev

  # Backend Development
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      target: development
    ports:
      - "8000:8000"
      - "5678:5678"  # Debug port
    volumes:
      - ./backend:/app
      - /app/.venv
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://cua_user:cua_password@postgres:5432/cua_dev
      - REDIS_URL=redis://redis:6379
      - APP_QDRANT_URL=http://qdrant:6333
      - APP_NEO4J_URL=bolt://neo4j:7687
      - SECRET_OPENAI_API_KEY=${SECRET_OPENAI_API_KEY}
      - SECRET_NEO4J_PASSWORD=development_password
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --log-level debug

  # MCP Gateway
  mcp-gateway:
    build:
      context: ./infra/docker-mcp-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "9090:9090"  # Metrics port
    volumes:
      - ./infra/docker-mcp-gateway/config:/app/config
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - SECRET_GITHUB_TOKEN=${SECRET_GITHUB_TOKEN}
    depends_on:
      - redis

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=cua_dev
      - POSTGRES_USER=cua_user
      - POSTGRES_PASSWORD=cua_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cua_user -d cua_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass development_password
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.9.0
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=debug
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.20-community
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    environment:
      - NEO4J_AUTH=neo4j/development_password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "development_password", "RETURN 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infra/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=development_password
      - GF_USERS_ALLOW_SIGN_UP=false

  # Development Tools
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI

  # Database Admin Tools
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@cua.dev
      - PGADMIN_DEFAULT_PASSWORD=development_password
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  neo4j_data:
  neo4j_logs:
  prometheus_data:
  grafana_data:
  pgadmin_data:

networks:
  default:
    driver: bridge