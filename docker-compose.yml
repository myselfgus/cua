# CUA Development Environment - Simplified
# For early development and testing

version: '3.8'

services:
  # Backend Development
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://cua_user:${POSTGRES_PASSWORD:-cua_dev_pass}@postgres:5432/cua_dev
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-neo4j_dev_pass}
      - SECRET_OPENAI_API_KEY=${SECRET_OPENAI_API_KEY:-your_openai_key_here}
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend Development (manual start recommended)
  # Run manually with: cd frontend && npm run dev
  
  # Essential Services Only
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=cua_dev
      - POSTGRES_USER=cua_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-cua_dev_pass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cua_user -d cua_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional Services (uncomment when needed)
  
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.9.0
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
    profiles:
      - full  # Only start with: docker-compose --profile full up

  # Neo4j Graph Database  
  neo4j:
    image: neo4j:5.20-community
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-neo4j_dev_pass}
      - NEO4J_dbms_memory_heap_initial__size=256m
      - NEO4J_dbms_memory_heap_max__size=512m
    profiles:
      - full  # Only start with: docker-compose --profile full up

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  neo4j_data:

networks:
  default:
    driver: bridge