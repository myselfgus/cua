name: 🔐 Basic Security Check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual trigger

jobs:
  basic-secret-check:
    name: 🔍 Basic Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Scan for common secret patterns
        run: |
          echo "🔍 Scanning for potential secrets..."
          
          # Create simple secret detection script
          cat > check_secrets.py << 'EOF'
          import os
          import re
          from pathlib import Path
          
          # Common secret patterns
          PATTERNS = [
              (r'sk-[A-Za-z0-9]{48}', 'OpenAI API Key'),
              (r'(AKIA[0-9A-Z]{16})', 'AWS Access Key'),
              (r'postgres://[^/\s]*:[^/\s]*@[^/\s]*', 'PostgreSQL URL with credentials'),
              (r'redis://[^/\s]*:[^/\s]*@[^/\s]*', 'Redis URL with credentials'),
              (r'mongodb://[^/\s]*:[^/\s]*@[^/\s]*', 'MongoDB URL with credentials'),
              (r'api_key\s*=\s*["\'][^"\']{20,}["\']', 'Generic API Key'),
              (r'secret_key\s*=\s*["\'][^"\']{20,}["\']', 'Generic Secret Key'),
          ]
          
          found_secrets = []
          
          for file_path in Path('.').rglob('*'):
              if file_path.is_file() and not any(x in str(file_path) for x in ['.git', 'node_modules', '__pycache__']):
                  try:
                      with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                          content = f.read()
                          for pattern, description in PATTERNS:
                              matches = re.finditer(pattern, content, re.IGNORECASE)
                              for match in matches:
                                  line_num = content[:match.start()].count('\n') + 1
                                  found_secrets.append((file_path, line_num, description, match.group()[:20] + '...'))
                  except:
                      continue
          
          if found_secrets:
              print("🚨 Potential secrets found:")
              for file_path, line_num, description, preview in found_secrets:
                  print(f"  {file_path}:{line_num} - {description}")
                  print(f"    Preview: {preview}")
              exit(1)
          else:
              print("✅ No obvious secrets detected")
          EOF
          
          python check_secrets.py

  validate-environment:
    name: 🔧 Environment Configuration Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check environment setup
        run: |
          echo "🔧 Checking environment configuration..."
          
          # Check for env files
          echo "Environment files:"
          ls -la | grep -E "\.(env|environment)" || echo "  No .env files found"
          
          # Check for Docker environment
          if [ -f "docker-compose.yml" ]; then
            echo "✅ docker-compose.yml found"
          else
            echo "⚠️ No docker-compose.yml found"
          fi
          
          # Check for basic configuration files
          echo ""
          echo "Configuration files:"
          [ -f "frontend/.env.example" ] && echo "  ✅ frontend/.env.example" || echo "  ❌ frontend/.env.example missing"
          [ -f "backend/.env.example" ] && echo "  ✅ backend/.env.example" || echo "  ❌ backend/.env.example missing"
          
          echo ""
          echo "🔧 Environment check completed"