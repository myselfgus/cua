name: 🧪 Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_run:
    workflows: ["🎯 Project Readiness Validation"]
    types: [completed]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  check-readiness:
    name: 🎯 Check Project Readiness
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'
    outputs:
      frontend-ready: ${{ steps.readiness.outputs.frontend-ready }}
      backend-ready: ${{ steps.readiness.outputs.backend-ready }}
      skip-ci: ${{ steps.readiness.outputs.skip-ci }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔍 Quick readiness check
        id: readiness
        run: |
          # Quick check for basic source files
          FRONTEND_READY=false
          BACKEND_READY=false
          
          # Check frontend
          if find frontend -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" 2>/dev/null | grep -q .; then
            FRONTEND_READY=true
          fi
          
          # Check backend  
          if find backend -name "*.py" 2>/dev/null | grep -q . && find backend -name "main.py" -o -name "app.py" -o -path "*/app/main.py" 2>/dev/null | grep -q .; then
            BACKEND_READY=true
          fi
          
          # Skip CI if neither is ready
          SKIP_CI=true
          if [[ "$FRONTEND_READY" == "true" || "$BACKEND_READY" == "true" ]]; then
            SKIP_CI=false
          fi
          
          echo "frontend-ready=$FRONTEND_READY" >> $GITHUB_OUTPUT
          echo "backend-ready=$BACKEND_READY" >> $GITHUB_OUTPUT
          echo "skip-ci=$SKIP_CI" >> $GITHUB_OUTPUT
          
          echo "🎨 Frontend ready: $FRONTEND_READY"
          echo "🐍 Backend ready: $BACKEND_READY"
          echo "🚫 Skip CI: $SKIP_CI"

  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    needs: check-readiness
    if: needs.check-readiness.outputs.skip-ci == 'false'
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - 'package*.json'
            backend:
              - 'backend/**'
              - 'requirements*.txt'
            docs:
              - 'docs/**'
              - '*.md'

  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    needs: [check-readiness, detect-changes]
    if: needs.check-readiness.outputs.frontend-ready == 'true' && (needs.detect-changes.outputs.frontend == 'true' || github.event_name == 'workflow_run')
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: 📋 Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: 🔧 Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit
      
      - name: 🔍 Lint code
        run: |
          cd frontend
          npm run lint
          npm run type-check
      
      - name: 🧪 Run tests
        run: |
          cd frontend
          npm run test:coverage
      
      - name: 🏗️ Build application
        run: |
          cd frontend
          npm run build
      
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: frontend/coverage
          flags: frontend
          name: frontend-coverage

  backend-tests:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    needs: [check-readiness, detect-changes]
    if: needs.check-readiness.outputs.backend-ready == 'true' && (needs.detect-changes.outputs.backend == 'true' || github.event_name == 'workflow_run')
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: ci_db_pass
          POSTGRES_USER: test_user
          POSTGRES_DB: test_cua
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      qdrant:
        image: qdrant/qdrant:v1.9.0
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: 📋 Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: 🔧 Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: 🔍 Lint code
        run: |
          cd backend
          ruff check .
          black --check .
          mypy .
      
      - name: 🔒 Security scan
        run: |
          cd backend
          safety check
          bandit -r app/
      
      - name: 🧪 Run tests
        run: |
          cd backend
          pytest --cov=app --cov-report=xml --cov-report=html
        env:
          DATABASE_URL: postgresql://test_user:ci_db_pass@localhost:5432/test_cua
          REDIS_URL: redis://localhost:6379
          QDRANT_URL: http://localhost:6333
          SECRET_KEY: test_secret_key_for_ci
      
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: backend
          flags: backend
          name: backend-coverage

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: always() && (needs.frontend-tests.result == 'success' || needs.frontend-tests.result == 'skipped') && (needs.backend-tests.result == 'success' || needs.backend-tests.result == 'skipped')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 🐳 Start services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to be ready
      
      - name: 🔍 Verify services are healthy
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
      
      - name: 🧪 Run E2E tests
        run: |
          cd tests/integration
          npm install
          npx playwright install --with-deps
          npx playwright test
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          API_BASE_URL: http://localhost:8000
      
      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: tests/integration/playwright-report/
          retention-days: 7
      
      - name: 🧹 Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: 🕵️ Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python
      
      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  build-images:
    name: 🏗️ Build Container Images
    runs-on: ubuntu-latest
    needs: [check-readiness, frontend-tests, backend-tests]
    if: needs.check-readiness.outputs.skip-ci == 'false' && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔑 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}/frontend
            ghcr.io/${{ github.repository }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 🏗️ Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 🏗️ Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Provide guidance when CI is skipped
  ci-skipped-guidance:
    name: 💡 CI Skipped - Development Guidance
    runs-on: ubuntu-latest
    needs: check-readiness
    if: needs.check-readiness.outputs.skip-ci == 'true'
    
    steps:
      - name: 💡 Provide development guidance
        run: |
          echo "🚫 CI/CD workflows have been skipped"
          echo "Reason: Project lacks sufficient source code for meaningful testing"
          echo ""
          echo "📋 To enable full CI/CD workflows:"
          echo ""
          echo "Frontend (React/Next.js):"
          echo "  ✅ Create source files in frontend/src/"
          echo "  ✅ Add React components (.tsx, .jsx files)"
          echo "  ✅ Implement basic pages and routing"
          echo "  ✅ Add test files"
          echo ""
          echo "Backend (FastAPI):"
          echo "  ✅ Create source files in backend/app/"
          echo "  ✅ Add main.py with FastAPI application"
          echo "  ✅ Implement API endpoints and routes"
          echo "  ✅ Add test files"
          echo ""
          echo "Once basic source code is present, CI/CD will automatically activate!"